#!/usr/bin/env python2.7
#--coding:utf-8 --
"""
pet2fingerprint
2017-10-12: finished 
2017-10-15: integrated into cLoops 
"""
__date__ = "2017-10-10"
__modified__ = ""
__email__ = "caoyaqiang@picb.ac.cn"

#general library
import os, argparse
from datetime import datetime
from glob import glob

#3rd library
import h5py
import numpy as np
import pandas as pd
from joblib import Parallel, delayed

#cLoops
from cLoops.utils import getLogger, pet2fingerprintHelp
from cLoops.io import readPets, parseIv
from cLoops.cPlots import plotFingerPrint

#global settings
global logger


def pet2contactMatrixUpper(petfile, petclass, binSize=2000):
    key, mat, intra_flag = readPets(petfile, petclass)
    mat = mat[:, 1:]
    minC = np.min(mat)
    ds = {}
    for t in mat:
        nx = (t[0] - minC) / binSize
        ny = (t[1] - minC) / binSize
        if nx not in ds:
            ds[nx] = {}
        if ny not in ds[nx]:
            ds[nx][ny] = 0
        ds[nx][ny] += 1
    nds = []
    for nx in ds.keys():
        for ny in ds[nx].keys():
            nds.append(ds[nx][ny])
    nds = np.array(nds)
    return nds


def contactMatrixUpper2Bins(ds, bins=100):
    if len(ds) == 0:
        return np.array([])
    #default is ascending sort
    ds.sort()
    #bin the contacts into 100 bins for comparing between samples
    nn = []
    step = len(ds) / bins
    if step < 1:
        for i in xrange(bins):
            nn.append(ds[len(ds) * i / bins])
    else:
        for i in xrange(0, len(ds), step):
            if i + step > len(ds):
                break
            nn.append(ds[i:i + step].sum())
    nn = np.array(nn)
    nn = np.cumsum(nn) / float(nn.sum())
    return nn


def pet2FingerPrint(petfile, binSize=2000, cpu=10, bins=100):
    h5fh = h5py.File(petfile, 'r')
    h5pet_group = h5fh['pets'].keys()
    h5fh.close()
    ds = Parallel(n_jobs=cpu)(delayed(pet2contactMatrixUpper)(petfile,
            petclass, binSize) for petclass in h5pet_group)
    cis_ds = []
    trans_ds = []
    for i in xrange(len(h5pet_group)):
        petclass_key = h5pet_group[i].split('_')
        if petclass_key[0] == petclass_key[1]:
            cis_ds.append(ds[i])
        else:
            trans_ds.append(ds[i])
    if len(cis_ds) > 0:
        cis_ds = np.concatenate(cis_ds)
    if len(trans_ds) > 0:
        trans_ds = np.concatenate(trans_ds)
    cis_nn = contactMatrixUpper2Bins(cis_ds, bins)
    trans_nn = contactMatrixUpper2Bins(trans_ds, bins)
    return cis_nn, trans_nn


def getFingerPrint(petfiles, labels, fout, binSize=2000, cpu=10, plot=1, bins=100):
    petfiles = petfiles.split(",")
    if labels != "" and len(petfiles) != len(labels.split(",")):
        logger.error(
            "Numbers of files and labels are not equal! Return.")
        return
    if labels != "":
        labels = labels.split(",")
    data = {}
    x = np.linspace(0, 1, bins)
    y = np.linspace(0, 1, bins)
    data["random"] = y
    for i in xrange(len(petfiles)):
        logger.info("Getting finger print for %s" % petfiles[i])
        nlabel = petfiles[i].split("/")[-1]
        cis_nn, trans_nn = pet2FingerPrint(
            petfiles[i],
            binSize=binSize,
            cpu=cpu,
            bins=bins)
        if labels !="" and labels[i] != "":
            nlabel = labels[i]
        if len(trans_nn) == 0:
            data[nlabel] = cis_nn
        elif len(cis_nn) == 0:
            data[nlabel] = trans_nn
        else:
            data[nlabel + '_cis'] = cis_nn
            data[nlabel + '_trans'] = trans_nn
    data = pd.DataFrame(data)
    data.index = x
    data.to_csv("%s_fingerprint.txt" % fout)
    if plot:
        plotFingerPrint(data, fout)


if __name__ == "__main__":
    start = datetime.now()
    global logger
    fn = os.path.join(os.getcwd(), "pet2fingerprint.log")
    logger = getLogger(fn)
    op = pet2fingerprintHelp()
    getFingerPrint(
        op.input,
        op.labels,
        op.output,
        binSize=op.binSize,
        cpu=op.cpu,
        plot=op.plot)
    usedtime = datetime.now() - start
    r = "pet2fingerprint finished. Bye! Used time:%s" % usedtime
    logger.info(r)
